// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use crate::schema::*;
use schemars::JsonSchema;
use diesel::{Identifiable, Queryable, Insertable};
use serde::{Serialize, Deserialize};
use diesel::Associations;
use chrono::NaiveDateTime;

#[derive(Debug, JsonSchema, Serialize, Deserialize, Queryable, Insertable, Identifiable, Associations)]
#[diesel(belongs_to(Subject))]
#[diesel(primary_key(assignment_id))]
#[diesel(table_name = assignments)]
pub struct Assignment {
    pub assignment_id: String,
    pub subject_id: String,
    pub title: String,
    pub description: String,
    pub accepted_mime_types: String,
}

#[derive(Debug, JsonSchema, Serialize, Deserialize, Queryable, Insertable, Identifiable)]
#[diesel(primary_key(login_id))]
#[diesel(table_name = logins)]
pub struct Login {
    pub login_id: String,
    pub user_id: String,
    pub email: String,
    pub passwd_hash: String,
}

#[derive(Debug, JsonSchema, Serialize, Deserialize, Queryable, Insertable, Identifiable)]
#[diesel(primary_key(role_id))]
#[diesel(table_name = roles)]
pub struct Role {
    pub role_id: String,
    pub name: String,
}

#[derive(Debug, JsonSchema, Serialize, Deserialize, Queryable, Insertable, Identifiable)]
#[diesel(primary_key(refresh_key_id))]
#[diesel(table_name = session_ids)]
pub struct SessionId {
    pub refresh_key_id: String,
    pub user_id: String,
    pub expiration_time: NaiveDateTime,
}

#[derive(Debug, JsonSchema, Serialize, Deserialize, Queryable, Insertable, Identifiable)]
#[diesel(primary_key(solution_id))]
#[diesel(table_name = solutions)]
pub struct Solution {
    pub solution_id: String,
    pub grade: Option<f64>,
    pub submission_date: NaiveDateTime,
    pub solution_data: Vec<u8>,
    pub reviewed_by: Option<String>,
    pub review_comment: Option<String>,
    pub review_date: Option<NaiveDateTime>,
    pub mime_type: String,
    pub assignment_id: String,
}

#[derive(Debug, JsonSchema, Serialize, Deserialize, Queryable, Insertable, Identifiable, Associations)]
#[diesel(belongs_to(Subject))]
#[diesel(belongs_to(Role))]
#[diesel(primary_key(subject_id, role_id))]
#[diesel(table_name = subject_role)]
pub struct SubjectRole {
    pub subject_id: String,
    pub role_id: String,
}

#[derive(Debug, JsonSchema, Serialize, Deserialize, Queryable, Insertable, Identifiable)]
#[diesel(primary_key(subject_id))]
#[diesel(table_name = subjects)]
pub struct Subject {
    pub subject_id: String,
    pub subject_name: String,
}

#[derive(Debug, JsonSchema, Serialize, Deserialize, Queryable, Insertable, Identifiable, Associations)]
#[diesel(belongs_to(User))]
#[diesel(belongs_to(Role))]
#[diesel(primary_key(role_id, user_id))]
#[diesel(table_name = user_role)]
pub struct UserRole {
    pub role_id: String,
    pub user_id: String,
}

#[derive(Debug, JsonSchema, Serialize, Deserialize, Queryable, Insertable, Identifiable, Associations)]
#[diesel(belongs_to(Solution))]
#[diesel(belongs_to(User))]
#[diesel(primary_key(user_id, solution_id))]
#[diesel(table_name = user_solution)]
pub struct UserSolution {
    pub user_id: String,
    pub solution_id: String,
}

#[derive(Debug, JsonSchema, Serialize, Deserialize, Queryable, Insertable, Identifiable)]
#[diesel(primary_key(user_id))]
#[diesel(table_name = users)]
pub struct User {
    pub user_id: String,
    pub name: String,
    pub surname: String,
    pub student_id: Option<String>,
    pub is_admin: bool,
}

